AVR Macro-Assembler, Version 2.1                          29/12/2024  PAGE   1
Test: Macros     ;

 LOC       OBJ                   LINE   SOURCE

                                    1   ;#define XASMAVR via commandline option '/DXASMAVR'
                                    2   ;----------------------------------,
                                    3   #ifdef XASMAVR			   ;
                                    4    .TITLE Test: Macros		   ;
                                    5    .PAGELENGTH(84)		   ;
                                    6    .PAGEWIDTH(130)		   ;
                                    7    .SYMBOLS			   ;
                                    8    .MODEL BYTE 			   ;
                                    9   ; .MODEL WORD 			   ;
                                   10    .DEVICE ATxmega384C3		   ;
                                   11   #else				   ;
                                   14   #endif ;XASMAVR		   	   ;
                                   15   ;----------------------------------'
                                   16   .LISTMAC
                                   17   
                                   18   .MACRO Align  	; align labels to specific boundaries.
                                   19   alignfromhere:
                                   20            .ORG  (PC+(@0)) - ((PC+(@0)) % (@0))
                                   21   .ENDMACRO
                                   22   
                                   23   ;----
                                   24   .DSEG
                                   25   ;----
 00002000                  :D      26   _sramStart:
 00002000                  :D      27   	.BYTE 1
 00002001                  :D      28   _sr1:
                                   29   #ifdef XASMAVR
                                   30   	.EVEN	; = if (PC % 2) silently skip over 1 byte (=0)'
                                   31   #endif ;XASMAVR
 00002002                  :D      32   _sr2:
                                   33   
                                   34   ;----
                                   35   .CSEG
                                   36   ;----
 00000000                  :C      37   _romStart:
 00000000  01 23           :C      38   	.DB $01,$23
 00000002                  :C      39   _r1:
 00000002                  :C +    40   	ALIGN 16
 00000002                  :C +    41   alignfromhere_00010001:
 00000020                  :C +    42            .ORG  (PC+(16)) - ((PC+(16)) % (16))
 00000020  45 67           :C      43   	.DB $45,$67
 00000022                  :C      44   _r2:
 00000022                  :C +    45   	ALIGN EXP2(4)
 00000022                  :C +    46   alignfromhere_00010002:
 00000040                  :C +    47            .ORG  (PC+(1<<04h)) - ((PC+(1<<04h)) % (1<<04h))
 00000040  89 AB           :C      48   	.DB $89,$AB
 00000042                  :C      49   _r3:
                                   50   #ifdef XASMAVR
                                   51   	.EVEN	; = if (PC % 2) silently insert a 'nop instruction (=0)'
                                   52   #endif ;XASMAVR
 00000042  CD EF           :C      53   	.DB $CD,$EF
 00000044                  :C      54   _r4:
                                   55   
                                   56   ;----
                                   57   .ESEG
                                   58   ;----
 00001000                  :E      59   _eepromStart:
 00001000  01              :E      60   	.DB $01;,$23
                                   61   #ifdef XASMAVR
 00001001                  :E +    62   	ALIGN 16
 00001001                  :E +    63   alignfromhere_00010003:
 00001010                  :E +    64            .ORG  (PC+(16)) - ((PC+(16)) % (16))
                                   65   #endif ;XASMAVR
 00001010  45              :E      66   	.DB $45;,$67
 00001011                  :E      67   _ee2:
                                   68   #ifdef XASMAVR
 00001011                  :E +    69   	ALIGN EXP2(4)
 00001011                  :E +    70   alignfromhere_00010004:
 00001020                  :E +    71            .ORG  (PC+(1<<04h)) - ((PC+(1<<04h)) % (1<<04h))
                                   72   #endif ;XASMAVR
 00001020  89              :E      73   	.DB $89;,$AB
 00001021                  :E      74   _ee3:
                                   75   #ifdef XASMAVR
                                   76   	.EVEN	; = if (PC % 2)  silently insert a 'nop instruction (=0)'
                                   77   #endif ;XASMAVR
 00001022                  :E      78   _ee4:
 00001022  CD              :E      79   	.DB $CD;,$EF
 00001023                  :E      80   _ee5:
                                   81   #ifdef XASMAVR
                                   82   	.EVEN	; = if (PC % 2)  silently insert a 'nop instruction (=0)'
                                   83   #endif ;XASMAVR
AVR Macro-Assembler, Version 2.1                          29/12/2024  PAGE   2
Test: Macros     ;

 LOC       OBJ                   LINE   SOURCE

 00001024                  :E      84   _ee6:
                                   85   
                                   86   ;----
                                   87   .CSEG
                                   88   ;----
                                   89   .MACRO newPage
                                   90     #ifdef XASMAVR
                                   91      .SUBTTL @0
                                   92      .EJECT
                                   93     #endif ;XASMAVR
                                   94   .ENDM				       
 00000200                  :C      95   .org $100
                                   96   
                                   97   ; Macro Test (Macro(s) within Macro and local Macro labels)
                                   98   .MACRO wrInit 	;; Macro #1
                                   99   #ifdef XASMAVR
                                  100   mtst:	jmp	mtst    ;; local label test
                                  101   #else							 
                                  102   	jmp	mtst
                                  103   #endif ;XASMAVR
                                  104   	call	init							 
                                  105   	call	cmd							 
                                  106          	call	_delay
                                  107          	jmp	delay
                                  108   	.DW	LOW(cmd+init), HIGH(init) 
                                  109   	.DW     cmd, cmd+Init+_delay 
                                  110   	WRCMD (1<<_F)|(0<<_F_8B)                                       
                                  111    cmd:   WRCMD (1<<_F)|(0<<_F_8B)|(1<<_F_2L)                            
                                  112   	WRCMD (1<<_CLR)                                                
                                  113   _delay:	WRCMD (1<<_ENTRY_MODE)|(1<<_ENTRY_INC)                         
                                  114   	WRCMD (1<<_ON)|(1<<_ON_DISPLAY)|(0<<_ON_CURSOR)|(0<<_ON_BLINK) 
                                  115    init:  WRCMD (1<<_HOME)						 
                                  116   .ENDM
                                  117   
                                  118   .MACRO wrCmd    ;;Macro #2
                                  119          	ldi	R17, @0
                                  120    wrc: 	call	cmd
                                  121           ROUT 10, R17, 9                                                      
                                  122   .ENDM
                                  123   
                                  124   .MACRO rOut	;;Macro #3					        
                                  125       	ldi 	@1, @2
                                  126    rou: 	out 	@0, @1
                                  127   .ENDMACRO
                                  128   ;;----------------------------------------------------------------
                                  129   
 = 00000000                       130   .EQU    _CLR             = 0b00000000 ; 
 = 00000001                       131   .EQU    _HOME            = 0b00000001 ; 
 = 00000001                       132   .EQU    _ENTRY_INC       = 0b00000001 ; 
 = 00000002                       133   .EQU    _ENTRY_MODE      = 0b00000010 ; 
                                  134   
 = 00000000                       135   .EQU    _ON_BLINK        = 0b00000000 ; 
 = 00000001                       136   .EQU    _ON_CURSOR       = 0b00000001 ; 
 = 00000002                       137   .EQU    _ON_DISPLAY      = 0b00000010 ; 
 = 00000003                       138   .EQU    _ON              = 0b00000011 ; 
                                  139   
 = 00000003                       140   .EQU    _F_2L            = 0b00000011 ; 
 = 00000004                       141   .EQU    _F_8B            = 0b00000100 ; 
 = 00000005                       142   .EQU    _F               = 0b00000101 ; 
                                  143   
 00000200  0E 94 8A 01     :C     144   	call	init
 00000204  0E 94 8B 01     :C     145   	call	delay
 00000208  0E 94 8C 01     :C     146   	call	cmd
                                  147   
 0000020C                  :C +   148   mtst:   WRINIT ;; Macro expansion #1
                              +   149   #ifdef XASMAVR
 0000020C  0C 94 06 01     :C +   150   mtst_00030001:	jmp	mtst_00030001    
                              +   151   #else							 
                              +   153   #endif 
 00000210  0E 94 2D 01     :C +   154   	call	init_00030001        
 00000214  0E 94 19 01     :C +   155   	call	cmd_00030001        
 00000218  0E 94 23 01     :C +   156          	call	_delay_00030001
 0000021C  0C 94 8B 01     :C +   157          	jmp	delay
 00000220  0046            :C +   158   	.DW	LOW(cmd_00030001+init_00030001), HIGH(init_00030001)
 00000222  0001            :C
 00000224  0119            :C +   159   	.DW     cmd_00030001, cmd_00030001+Init_00030001+_delay_00030001
 00000226  0369            :C
 00000228                  :C +   160   	WRCMD (1<<_F)|(0<<_F_8B)                                       
 00000228  10 E2           :C +   161          	ldi	R17, (1<<_F)|(0<<_F_8B)
 0000022A  0E 94 8C 01     :C +   162    wrc_00040001: 	call	cmd
 0000022E                  :C +   163           ROUT 10, R17, 9                                                      
AVR Macro-Assembler, Version 2.1                          29/12/2024  PAGE   3
Test: Macros     ;

 LOC       OBJ                   LINE   SOURCE

 0000022E  19 E0           :C +   164       	ldi 	R17, 9
 00000230  1A B9           :C +   165    rou_00050001: 	out 	10, R17
 00000232                  :C +   166    cmd_00030001:   WRCMD (1<<_F)|(0<<_F_8B)|(1<<_F_2L)                            
 00000232  18 E2           :C +   167          	ldi	R17, (1<<_F)|(0<<_F_8B)|(1<<_F_2L)
 00000234  0E 94 8C 01     :C +   168    wrc_00040002: 	call	cmd
 00000238                  :C +   169           ROUT 10, R17, 9                                                      
 00000238  19 E0           :C +   170       	ldi 	R17, 9
 0000023A  1A B9           :C +   171    rou_00050002: 	out 	10, R17
 0000023C                  :C +   172   	WRCMD (1<<_CLR)                                                
 0000023C  11 E0           :C +   173          	ldi	R17, (1<<_CLR)
 0000023E  0E 94 8C 01     :C +   174    wrc_00040003: 	call	cmd
 00000242                  :C +   175           ROUT 10, R17, 9                                                      
 00000242  19 E0           :C +   176       	ldi 	R17, 9
 00000244  1A B9           :C +   177    rou_00050003: 	out 	10, R17
 00000246                  :C +   178   _delay_00030001:	WRCMD (1<<_ENTRY_MODE)|(1<<_ENTRY_INC)                         
 00000246  16 E0           :C +   179          	ldi	R17, (1<<_ENTRY_MODE)|(1<<_ENTRY_INC)
 00000248  0E 94 8C 01     :C +   180    wrc_00040004: 	call	cmd
 0000024C                  :C +   181           ROUT 10, R17, 9                                                      
 0000024C  19 E0           :C +   182       	ldi 	R17, 9
 0000024E  1A B9           :C +   183    rou_00050004: 	out 	10, R17
 00000250                  :C +   184   	WRCMD (1<<_ON)|(1<<_ON_DISPLAY)|(0<<_ON_CURSOR)|(0<<_ON_BLINK) 
 00000250  1C E0           :C +   185          	ldi	R17, (1<<_ON)|(1<<_ON_DISPLAY)|(0<<_ON_CURSOR)|(0<<_ON_BLINK)
 00000252  0E 94 8C 01     :C +   186    wrc_00040005: 	call	cmd
 00000256                  :C +   187           ROUT 10, R17, 9                                                      
 00000256  19 E0           :C +   188       	ldi 	R17, 9
 00000258  1A B9           :C +   189    rou_00050005: 	out 	10, R17
 0000025A                  :C +   190    init_00030001:  WRCMD (1<<_HOME)       
 0000025A  12 E0           :C +   191          	ldi	R17, (1<<_HOME)
 0000025C  0E 94 8C 01     :C +   192    wrc_00040006: 	call	cmd
 00000260                  :C +   193           ROUT 10, R17, 9                                                      
 00000260  19 E0           :C +   194       	ldi 	R17, 9
 00000262  1A B9           :C +   195    rou_00050006: 	out 	10, R17
                                  196   ;	------
                                  197   
 00000264                  :C +   198       	WRINIT ;; Macro expansion #2
                              +   199   #ifdef XASMAVR
 00000264  0C 94 32 01     :C +   200   mtst_00030002:	jmp	mtst_00030002    
                              +   201   #else							 
                              +   203   #endif 
 00000268  0E 94 59 01     :C +   204   	call	init_00030002        
 0000026C  0E 94 45 01     :C +   205   	call	cmd_00030002        
 00000270  0E 94 4F 01     :C +   206          	call	_delay_00030002
 00000274  0C 94 8B 01     :C +   207          	jmp	delay
 00000278  009E            :C +   208   	.DW	LOW(cmd_00030002+init_00030002), HIGH(init_00030002)
 0000027A  0001            :C
 0000027C  0145            :C +   209   	.DW     cmd_00030002, cmd_00030002+Init_00030002+_delay_00030002
 0000027E  03ED            :C
 00000280                  :C +   210   	WRCMD (1<<_F)|(0<<_F_8B)                                       
 00000280  10 E2           :C +   211          	ldi	R17, (1<<_F)|(0<<_F_8B)
 00000282  0E 94 8C 01     :C +   212    wrc_00040007: 	call	cmd
 00000286                  :C +   213           ROUT 10, R17, 9                                                      
 00000286  19 E0           :C +   214       	ldi 	R17, 9
 00000288  1A B9           :C +   215    rou_00050007: 	out 	10, R17
 0000028A                  :C +   216    cmd_00030002:   WRCMD (1<<_F)|(0<<_F_8B)|(1<<_F_2L)                            
 0000028A  18 E2           :C +   217          	ldi	R17, (1<<_F)|(0<<_F_8B)|(1<<_F_2L)
 0000028C  0E 94 8C 01     :C +   218    wrc_00040008: 	call	cmd
 00000290                  :C +   219           ROUT 10, R17, 9                                                      
 00000290  19 E0           :C +   220       	ldi 	R17, 9
 00000292  1A B9           :C +   221    rou_00050008: 	out 	10, R17
 00000294                  :C +   222   	WRCMD (1<<_CLR)                                                
 00000294  11 E0           :C +   223          	ldi	R17, (1<<_CLR)
 00000296  0E 94 8C 01     :C +   224    wrc_00040009: 	call	cmd
 0000029A                  :C +   225           ROUT 10, R17, 9                                                      
 0000029A  19 E0           :C +   226       	ldi 	R17, 9
 0000029C  1A B9           :C +   227    rou_00050009: 	out 	10, R17
 0000029E                  :C +   228   _delay_00030002:	WRCMD (1<<_ENTRY_MODE)|(1<<_ENTRY_INC)                         
 0000029E  16 E0           :C +   229          	ldi	R17, (1<<_ENTRY_MODE)|(1<<_ENTRY_INC)
 000002A0  0E 94 8C 01     :C +   230    wrc_00040010: 	call	cmd
 000002A4                  :C +   231           ROUT 10, R17, 9                                                      
 000002A4  19 E0           :C +   232       	ldi 	R17, 9
 000002A6  1A B9           :C +   233    rou_00050010: 	out 	10, R17
 000002A8                  :C +   234   	WRCMD (1<<_ON)|(1<<_ON_DISPLAY)|(0<<_ON_CURSOR)|(0<<_ON_BLINK) 
 000002A8  1C E0           :C +   235          	ldi	R17, (1<<_ON)|(1<<_ON_DISPLAY)|(0<<_ON_CURSOR)|(0<<_ON_BLINK)
 000002AA  0E 94 8C 01     :C +   236    wrc_00040011: 	call	cmd
 000002AE                  :C +   237           ROUT 10, R17, 9                                                      
 000002AE  19 E0           :C +   238       	ldi 	R17, 9
 000002B0  1A B9           :C +   239    rou_00050011: 	out 	10, R17
 000002B2                  :C +   240    init_00030002:  WRCMD (1<<_HOME)       
 000002B2  12 E0           :C +   241          	ldi	R17, (1<<_HOME)
 000002B4  0E 94 8C 01     :C +   242    wrc_00040012: 	call	cmd
 000002B8                  :C +   243           ROUT 10, R17, 9                                                      
AVR Macro-Assembler, Version 2.1                          29/12/2024  PAGE   4
Test: Macros     ;

 LOC       OBJ                   LINE   SOURCE

 000002B8  19 E0           :C +   244       	ldi 	R17, 9
 000002BA  1A B9           :C +   245    rou_00050012: 	out 	10, R17
                                  246   ;	------
                                  247   #ifdef XASMAVR
                                  248   .NOLISTMAC
                                  249   #endif ;XASMAVR
 000002BC                  :C +   250       	WRINIT ;; Macro expansion #3
 000002D8                  :C +         	WRCMD (1<<_F)|(0<<_F_8B)                                       
 000002DE                  :C +                 ROUT 10, R17, 9                                                      
 000002E2                  :C +          cmd_00030003:   WRCMD (1<<_F)|(0<<_F_8B)|(1<<_F_2L)                            
 000002E8                  :C +                 ROUT 10, R17, 9                                                      
 000002EC                  :C +         	WRCMD (1<<_CLR)                                                
 000002F2                  :C +                 ROUT 10, R17, 9                                                      
 000002F6                  :C +         _delay_00030003:	WRCMD (1<<_ENTRY_MODE)|(1<<_ENTRY_INC)                         
 000002FC                  :C +                 ROUT 10, R17, 9                                                      
 00000300                  :C +         	WRCMD (1<<_ON)|(1<<_ON_DISPLAY)|(0<<_ON_CURSOR)|(0<<_ON_BLINK) 
 00000306                  :C +                 ROUT 10, R17, 9                                                      
 0000030A                  :C +          init_00030003:  WRCMD (1<<_HOME)       
 00000310                  :C +                 ROUT 10, R17, 9                                                      
                                  251   ;	------
 00000314  08 95           :C     252   init:	ret                                                         
 00000316  08 95           :C     253   delay:	ret                    
 00000318  08 95           :C     254   cmd:	ret
                                  255   
                                  256   ; -------------------------------------------
 0000031A                  :C +   257   	NEWPAGE	Macro Expansion Test 2
AVR Macro-Assembler, Version 2.1                          29/12/2024  PAGE   5
Test: Macros     ;
Macro Expansion Test 2

 LOC       OBJ                   LINE   SOURCE

                                  258   ; -------------------------------------------
 = 00708000                       259   .SET freqHz   = 7372800                   
 = 00000087                       260   .SET cyclTime = 1000000000 / freqHz     
 = 00000001                       261   .SET cycles   = ((1 + cyclTime - 1) / cyclTime - 0)
 0000031A  0001            :C     262   	.DW cycles ;= 1
 = FFFFFFFF                       263   .SET cycles   = ((1 + cyclTime - 1) / cyclTime - 2)
 0000031C  FFFF            :C     264   	.DW cycles ;= -1
                                  265   
                                  266   	.MACRO nsWaitA
                                  267         	.set cycles = ((@0 + cyclTime - 1) / cyclTime - @1)
                                  268       		.DW cycles
                                  269       		.DW (cycles > 0)
                                  270         	.if (cycles > (255 * 3 + 2))
                                  271             .WARNING "MACRO nsWait - too many cycles"
                                  272         	.else
                                  273             .if (cycles > 6)
                                  274               .SET cyclCount = (cycles / 3) 
                                  275             	ldi   @2, cyclCount
                                  276             	dec   @2
                                  277             	brne  PC-1
                                  278               .SET cycles = (cycles - (cyclCount * 3))
                                  279   	    	.DW cycles
                                  280             .endif
                                  281             .if (cycles > 0)
                                  282       		.DW (cycles > 0)
                                  283               .if (cycles & 4)
                                  284               	rjmp  PC+1
                                  285               	rjmp  PC+1
                                  286               .elif (cycles > 0)
                                  287               .endif
                                  288               .if (cycles & 2)
                                  289               	rjmp  PC+1
                                  290               .endif
                                  291               .if (cycles & 1)
                                  292               	nop
                                  293               .endif
                                  294             .endif
                                  295           .endif
                                  296   	.ENDMACRO
                                  297   
                                  298   ; -------------------------------------------
 0000031E                  :C +   299   	NEWPAGE	Macro Expansion Test 3
AVR Macro-Assembler, Version 2.1                          29/12/2024  PAGE   6
Test: Macros     ;
Macro Expansion Test 3

 LOC       OBJ                   LINE   SOURCE

                                  300   ; -------------------------------------------
                                  301   	.MACRO nsWaitB
                                  302         	.SET cycles = ((@0 + cyclTime - 1) / cyclTime - @1)
                                  303       		.DW cycles
                                  304       		.DW (cycles > 0x00)
                                  305         	.if (cycles > (255 * 3 + 2))
                                  306             .WARNING "cycles > 767"
                                  307         	.ELIF (cycles > 6)
                                  308             .SET cyclCount = (cycles / 3) 
                                  309             	ldi   @2, cyclCount
                                  310             	dec   @2
                                  311             	brne  PC-1
                                  312             .SET cycles = (cycles - (cyclCount * 3))
                                  313   	    	.DW cycles
                                  314           .ELIF (cycles > $00)
                                  315       		.DW (cycles > $00)
                                  316             .IF (cycles & 4)
                                  317               	rjmp  PC+1
                                  318               	rjmp  PC+1
                                  319             .ELIF (cycles > 0)
                                  320             .ENDIF
                                  321             .IF (cycles & 2)
                                  322               	rjmp  PC+1
                                  323             .ENDIF
                                  324             .IF (cycles & 1)
                                  325               	nop
                                  326             .ENDIF
                                  327           .ENDIF
                                  328   	.ENDMACRO
                                  329   ; ----------------------------------------------------------
                                  330   
 0000031E                  :C +   331   	NSWAITA 1, 0, R17 ;; Macro (A) expansion cycles = +1
                                  332   ;	-------
                                  333   
 00000326                  :C +   334   	NSWAITA 1, 2, R17 ;; Macro (A) expansion cycles = -1
                                  335   ;	-------
                                  336   ; ----------------------------------------------------------
                                  337   
 0000032A                  :C +   338   	NSWAITB 1, 0, R17 ;; Macro (B) expansion cycles = +1
                                  339   ;	-------
                                  340   
 00000332                  :C +   341    	NSWAITB 1, 2, R17 ;; Macro (B) expansion cycles = -1
                                  342   ;	-------
                                  343   ; ----------------------------------------------------------
                                  344   .EXIT                    

USER SYMBOLS

_CLR. . . . . . . . . . . . . . . . . .  00000000 A  _delay_00030001 . . . . . . . . . . . .  00000246 C  
_delay_00030002 . . . . . . . . . . . .  0000029E C  _delay_00030003 . . . . . . . . . . . .  000002F6 C  
_ee2. . . . . . . . . . . . . . . . . .  00001011 E  _ee3. . . . . . . . . . . . . . . . . .  00001021 E  
_ee4. . . . . . . . . . . . . . . . . .  00001022 E  _ee5. . . . . . . . . . . . . . . . . .  00001023 E  
_ee6. . . . . . . . . . . . . . . . . .  00001024 E  _eepromStart. . . . . . . . . . . . . .  00001000 E  
_ENTRY_INC. . . . . . . . . . . . . . .  00000001 A  _ENTRY_MODE . . . . . . . . . . . . . .  00000002 A  
_F. . . . . . . . . . . . . . . . . . .  00000005 A  _F_2L . . . . . . . . . . . . . . . . .  00000003 A  
_F_8B . . . . . . . . . . . . . . . . .  00000004 A  _HOME . . . . . . . . . . . . . . . . .  00000001 A  
_ON . . . . . . . . . . . . . . . . . .  00000003 A  _ON_BLINK . . . . . . . . . . . . . . .  00000000 A  
_ON_CURSOR. . . . . . . . . . . . . . .  00000001 A  _ON_DISPLAY . . . . . . . . . . . . . .  00000002 A  
_r1 . . . . . . . . . . . . . . . . . .  00000002 C  _r2 . . . . . . . . . . . . . . . . . .  00000022 C  
_r3 . . . . . . . . . . . . . . . . . .  00000042 C  _r4 . . . . . . . . . . . . . . . . . .  00000044 C  
_romStart . . . . . . . . . . . . . . .  00000000 C  _sr1. . . . . . . . . . . . . . . . . .  00002001 D  
_sr2. . . . . . . . . . . . . . . . . .  00002002 D  _sramStart. . . . . . . . . . . . . . .  00002000 D  
alignfromhere_00010001. . . . . . . . .  00000002 C  alignfromhere_00010002. . . . . . . . .  00000022 C  
alignfromhere_00010003. . . . . . . . .  00001001 E  alignfromhere_00010004. . . . . . . . .  00001011 E  
cmd . . . . . . . . . . . . . . . . . .  00000318 C  cmd_00030001. . . . . . . . . . . . . .  00000232 C  
cmd_00030002. . . . . . . . . . . . . .  0000028A C  cmd_00030003. . . . . . . . . . . . . .  000002E2 C  
cycles. . . . . . . . . . . . . . . . .  FFFFFFFF A  cyclTime. . . . . . . . . . . . . . . .  00000087 A  
delay . . . . . . . . . . . . . . . . .  00000316 C  freqHz. . . . . . . . . . . . . . . . .  00708000 A  
init. . . . . . . . . . . . . . . . . .  00000314 C  init_00030001 . . . . . . . . . . . . .  0000025A C  
init_00030002 . . . . . . . . . . . . .  000002B2 C  init_00030003 . . . . . . . . . . . . .  0000030A C  
mtst. . . . . . . . . . . . . . . . . .  0000020C C  mtst_00030001 . . . . . . . . . . . . .  0000020C C  
mtst_00030002 . . . . . . . . . . . . .  00000264 C  mtst_00030003 . . . . . . . . . . . . .  000002BC C  
rou_00050001. . . . . . . . . . . . . .  00000230 C  rou_00050002. . . . . . . . . . . . . .  0000023A C  
rou_00050003. . . . . . . . . . . . . .  00000244 C  rou_00050004. . . . . . . . . . . . . .  0000024E C  
rou_00050005. . . . . . . . . . . . . .  00000258 C  rou_00050006. . . . . . . . . . . . . .  00000262 C  
rou_00050007. . . . . . . . . . . . . .  00000288 C  rou_00050008. . . . . . . . . . . . . .  00000292 C  
rou_00050009. . . . . . . . . . . . . .  0000029C C  rou_00050010. . . . . . . . . . . . . .  000002A6 C  
rou_00050011. . . . . . . . . . . . . .  000002B0 C  rou_00050012. . . . . . . . . . . . . .  000002BA C  
rou_00050013. . . . . . . . . . . . . .  000002E0 C  rou_00050014. . . . . . . . . . . . . .  000002EA C  
rou_00050015. . . . . . . . . . . . . .  000002F4 C  rou_00050016. . . . . . . . . . . . . .  000002FE C  
rou_00050017. . . . . . . . . . . . . .  00000308 C  rou_00050018. . . . . . . . . . . . . .  00000312 C  
wrc_00040001. . . . . . . . . . . . . .  0000022A C  wrc_00040002. . . . . . . . . . . . . .  00000234 C  
wrc_00040003. . . . . . . . . . . . . .  0000023E C  wrc_00040004. . . . . . . . . . . . . .  00000248 C  
wrc_00040005. . . . . . . . . . . . . .  00000252 C  wrc_00040006. . . . . . . . . . . . . .  0000025C C  
wrc_00040007. . . . . . . . . . . . . .  00000282 C  wrc_00040008. . . . . . . . . . . . . .  0000028C C  
wrc_00040009. . . . . . . . . . . . . .  00000296 C  wrc_00040010. . . . . . . . . . . . . .  000002A0 C  
wrc_00040011. . . . . . . . . . . . . .  000002AA C  wrc_00040012. . . . . . . . . . . . . .  000002B4 C  
wrc_00040013. . . . . . . . . . . . . .  000002DA C  wrc_00040014. . . . . . . . . . . . . .  000002E4 C  
wrc_00040015. . . . . . . . . . . . . .  000002EE C  wrc_00040016. . . . . . . . . . . . . .  000002F8 C  
wrc_00040017. . . . . . . . . . . . . .  00000302 C  wrc_00040018. . . . . . . . . . . . . .  0000030C C  
XASMAVR . . . . . . . . . . . . . . . .  00000001 A  

 Info - Memory segments organization
        CSEG: Start = 0x00000000  End = 0x00000002  Size = 2 byte(s)
        CSEG: Start = 0x00000020  End = 0x00000022  Size = 2 byte(s)
        CSEG: Start = 0x00000040  End = 0x00000044  Size = 4 byte(s)
        CSEG: Start = 0x00000200  End = 0x00000336  Size = 310 byte(s)
        CSEG: Code size = 318 bytes

        DSEG: Start = 0x00002000  End = 0x00002002  Size = 2 byte(s)
        DSEG: Data size = 2 bytes

        ESEG: Start = 0x00001000  End = 0x00001001  Size = 1 byte(s)
        ESEG: Start = 0x00001010  End = 0x00001011  Size = 1 byte(s)
        ESEG: Start = 0x00001020  End = 0x00001024  Size = 4 byte(s)
        ESEG: Data size = 6 bytes

ASSEMBLY COMPLETE,   NO ERRORS
