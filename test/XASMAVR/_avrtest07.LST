AVR Macro-Assembler, Version 2.1                          29/12/2024  PAGE   1
Test: Operands, Operators and Expressions

 LOC       OBJ                   LINE   SOURCE

                                    1   ;#define XASMAVR via commandline option '/DXASMAVR'
                                    2   ;----------------------------------,
                                    3   #ifdef XASMAVR			   ;
                                    4    .TITLE Test: Operands, Operators and Expressions
                                    5    .PAGELENGTH(84)		   ;
                                    6    .PAGEWIDTH(145)		   ;
                                    7    .SYMBOLS			   ;
                                    8    .MODEL BYTE 			   ;
                                    9    .DEVICE ATxmega384C3		   ;
                                   10   #else				   ;
                                   12   #endif ;XASMAVR		   	   ;
                                   13   ;----------------------------------'
                                   14   
 00000000  1B 1B           :C      15           .DB  $18  | $B,          24  | 11 ;= 1B 1B
 00000002  1B 1B           :C      16           .DB  0b11000  | 0b1011,  24  | 11 ;= 1B 1B
                                   17   
                                   18           .DB 0x18 ,  0x0B ,24,11, 1, \
                                                     $18 ,   $0B ,24,11,    \
                                                 0b11000 ,0b1011 ,24,11
 00000004  18 0B 18 0B 01  :C   
 00000009  18 0B 18 0B 18  :C
 0000000E  0B 18 0B        :C
 00000011  00              :C           	.EVEN
                                   19   
                                   20           .DB 0x18 ,  0x0B ,24,11, \
                                                     $18 ,   $0B ,24,11, \
                                                 0b11000 ,0b1011 ,24,11
 00000012  18 0B 18 0B 18  :C   
 00000017  0B 18 0B 18 0B  :C
 0000001C  18 0B           :C
                                   21   
 0000001E  FFFF            :C      22   	.DW -0b1
 00000020  0000            :C      23   	.DW -0b0
                                   24   
                                   25   #ifdef XASMAVR
                                   26   ;; Test: Intel/MASM syntax binary/hex suffix 'b' 'h' special handling
                                   27   ;; 	 Motorola syntax binary prefix '%' '$'
                                   28   ;;       Unary '+'
 00000022  01 FF           :C      29   	.DB +0b1, -0b1
 00000024  00 00           :C      30   	.DB +0b0, -0b0
                                   31   
 00000026  0B 0B 0B B0 00  :C      32           .DB 0x0B, $0B, 0Bh, 0B0h, 0b
 0000002B  00              :C           	.EVEN
                                   33   
                                   34           .DB 0x18 ,  0x0B ,24,11, \
                                                     $18 ,   $0B ,24,11, \
                                                      18h,    0Bh,24,11, \ 
                                                 0b11000 ,0b1011 ,24,11, \
                                                  %11000 , %1011 ,24,11, \
                                                   11000b,  1011b,24,11
 0000002C  18 0B 18 0B 18  :C   
 00000031  0B 18 0B 18 0B  :C
 00000036  18 0B 18 0B 18  :C
 0000003B  0B 18 0B 18 0B  :C
 00000040  18 0B 18 0B     :C
                                   35   
                                   36   
 00000044  18 0B 18 0B     :C      37   	.DB 0x18, 0x0B, 24, 11		  ;= 18 0B 1B 2B
 00000048  18 0B 1B 2B     :C      38   	.DB 18h, 0Bh, 1Bh, 2Bh		  ;= 18 0B 1B 2B
 0000004C  18 0B 1B 2B     :C      39   	.DB 18h, 0Bh, 1Bh, 2Bh		  ;= 18 0B 1B 2B
                                   40   
 00000050  18 0A 1A 2A     :C      41   	.DB 18h, 0Ah, 1Ah, 2Ah		  ;= 18 0A 1A 2A
                                   42   
 00000054  1B 1B           :C      43           .DB 0x18     OR 0x0B,   24 OR 11  ;= 1B 1B
 00000056  1B 1B           :C      44           .DB  $18     OR  $0B,   24 OR 11  ;= 1B 1B
 00000058  1B 1B           :C      45           .DB  18h     OR  0Bh,   24 OR 11  ;= 1B 1B
 0000005A  1B 1B           :C      46           .DB 0b11000  OR 0b1011, 24 OR 11  ;= 1B 1B
 0000005C  1B 1B           :C      47           .DB %11000   OR %1011,  24 OR 11  ;= 1B 1B
 0000005E  1B 1B           :C      48           .DB 11000b   OR 1011b,  24 OR 11  ;= 1B 1B
                                   49   
 = 00000001                        50   .SET Test1=+1b
 00000060  0001            :C      51   .DW TEST1
 = FFFFFFFF                        52   .SET Test1=-1b
 00000062  FFFF            :C      53   .DW TEST1
 = 00000001                        54   .SET Test1=1b
 00000064  0001            :C      55   .DW TEST1
 = 00000001                        56   .SET Test1=01b
                                   57   
 = 00000003                        58   .SET Test1=+11b
 00000066  0003            :C      59   .DW TEST1
 = FFFFFFFD                        60   .SET Test1=-11b
AVR Macro-Assembler, Version 2.1                          29/12/2024  PAGE   2
Test: Operands, Operators and Expressions

 LOC       OBJ                   LINE   SOURCE

 00000068  FFFD            :C      61   .DW TEST1
 = 00000003                        62   .SET Test1=11b
 0000006A  0003            :C      63   .DW TEST1
 = 00000003                        64   .SET Test1=011b
                                   65   
 = 00000003                        66   .SET Test1=0b+11b
 0000006C  0003            :C      67   .DW TEST1
 = FFFFFFFD                        68   .SET Test1=0b-11b
                                   69   
 = 00000002                        70   .SET Test1=101b-11b
 0000006E  0002            :C      71   .DW TEST1
                                   72   
 = 00000003                        73   .SET Test1=1b*3
 00000070  0003            :C      74   .DW TEST1
 = 00000009                        75   .SET Test1=11b *3
 00000072  0009            :C      76   .DW TEST1
 = 00000004                        77   .SET Test1=1b+3
 00000074  0004            :C      78   .DW TEST1
 = 00000006                        79   .SET Test1=11b+3
                                   80   
 = 00000003                        81   .SET Test1=%0+%11
 00000076  0003            :C      82   .DW TEST1
 = FFFFFFFD                        83   .SET Test1=%0-%11
 00000078  FFFD            :C      84   .DW TEST1
 = 00000004                        85   .SET Test1=%1+3
 0000007A  0004            :C      86   .DW TEST1
 = 00000006                        87   .SET Test1=%11+3
 0000007C  0006            :C      88   .DW TEST1
 = 00000003                        89   .SET Test1=%1*3
 0000007E  0003            :C      90   .DW TEST1
 = 00000009                        91   .SET Test1=%11*3
 00000080  0009            :C      92   .DW TEST1
                                   93   
 = 00000011                        94   .SET  TEST1=%101*%11+%10 
 00000082  0011            :C      95   .DW TEST1
 = 00000011                        96   .SET  TEST1=101b*11b+10b 
 00000084  0011            :C      97   .DW TEST1
 00000086  03 04 0F 08 02  :C      98   	.DB  %1*3,   %1+3,   %101*3,   %101+3,   %101-3,   +%11 
 0000008B  03              :C
 0000008C  03 04 0F 08 02  :C      99   	.DB  %1*%11, %1+%11, %101*%11, %101+%11, %101-%11, -%11
 00000091  FD              :C
 00000092  03 04 0F 08 02  :C     100   	.DB  1b*3,   1b+3,   101b*3,   101b+3,   101b-3,   +11b
 00000097  03              :C
 00000098  03 04 0F 08 02  :C     101   	.DB  1b*11b, 1b+11b, 101b*11b, 101b+11b, 101b-11b, -11b
 0000009D  FD              :C
                                  102   #endif ;XASMAVR
                                  103   
                                  104   ; Decimal Constants
 0000009E  4E20            :C     105   	.DW  20000,  65500,  -1234		    
 000000A0  FFDC            :C
 000000A2  FB2E            :C
                                  106   
                                  107   ; Hexadecimal Constants (three notations)		    
                                  108   #ifdef XASMAVR
                                  109   	.DW  0x4E20, $4E20,  4E20h, \
                                        	     0xFFDC, $FFDC, 0FFDCh, \
                                        	     -0x4d2, -$4d2,  -4d2h
 000000A4  4E20            :C   
 000000A6  4E20            :C
 000000A8  4E20            :C
 000000AA  FFDC            :C
 000000AC  FFDC            :C
 000000AE  FFDC            :C
 000000B0  FB2E            :C
 000000B2  FB2E            :C
 000000B4  FB2E            :C
                                  110   #endif ;XASWMAVR
                                  111   
                                  112   	.DW  0x4E20, $4E20, \
                                        	     0xFFDC, $FFDC, \
                                        	     -0x4d2, -$4d2
 000000B6  4E20            :C   
 000000B8  4E20            :C
 000000BA  FFDC            :C
 000000BC  FFDC            :C
 000000BE  FB2E            :C
 000000C0  FB2E            :C
                                  113   
                                  114   ;.SET  TEST1=4d2        ; Error, not a valid constant --> hex assumed
                                  115   ;.SET  TEST1=1bbb       ; Error, not a valid constant --> hex assumed
                                  116   ;;ha;;	.DW  4d2, -4d2 ; Error, not a valid constant --> hex assumed
AVR Macro-Assembler, Version 2.1                          29/12/2024  PAGE   3
Test: Operands, Operators and Expressions

 LOC       OBJ                   LINE   SOURCE

                                  117   ;;ha;;	.DW  1bbb      ; Error, not a valid constant --> hex assumed
                                  118   
                                  119   #ifdef XASMAVR
                                  120   ; Binary Constants (three notations)
                                  121   	.DW   0b0100111000100000 , %0100111000100000 , 0100111000100000b , \
                                        	      0b1111111111011100 , %1111111111011100 , 1111111111011100b , \
                                        	         +(0b10011010010),    +(%10011010010),    +(10011010010b), \
                                        	          +0b10011010010 ,     +%10011010010 ,     +10011010010b , \
                                        	          -0b10011010010 ,     -%10011010010 ,     -10011010010b , \
                                        	          ~0b10011010010 ,     ~%10011010010 ,     ~10011010010b , \
                                        	          !0b10011010010 ,     !%10011010010 ,     !10011010010b , \
                                        	       NOT(0b10011010010),  NOT(%10011010010),  NOT(10011010010b), \
                                        	       NOT 0b10011010010 ,  NOT %10011010010 ,  NOT 10011010010b 
 000000C2  4E20            :C   
 000000C4  4E20            :C
 000000C6  4E20            :C
 000000C8  FFDC            :C
 000000CA  FFDC            :C
 000000CC  FFDC            :C
 000000CE  04D2            :C
 000000D0  04D2            :C
 000000D2  04D2            :C
 000000D4  04D2            :C
 000000D6  04D2            :C
 000000D8  04D2            :C
 000000DA  FB2E            :C
 000000DC  FB2E            :C
 000000DE  FB2E            :C
 000000E0  FB2D            :C
 000000E2  FB2D            :C
 000000E4  FB2D            :C
 000000E6  0000            :C
 000000E8  0000            :C
 000000EA  0000            :C
 000000EC  FB2D            :C
 000000EE  FB2D            :C
 000000F0  FB2D            :C
 000000F2  FB2D            :C
 000000F4  FB2D            :C
 000000F6  FB2D            :C
                                  122   	 
 000000F8  02 02 02 FF FF  :C     123   	.DB  0b10, %10, 10b, -0b1, -%1, -1b
 000000FD  FF              :C
                                  124   
 000000FE  03 04 03 04     :C     125   	.DB  0b1*3, 0b1+3, %1*3, %1+3
                                  126   
 00000102  03 04 03 01 01  :C     127   	.DB  1b*3, 1b+3, 01b*3, 1b, 01b 
 00000107  00              :C           	.EVEN
                                  128   
                                  129   ; Current Program memory location counter (three notations)
 00000108  0084            :C     130   	.DW  PC, *, $
 0000010A  0085            :C
 0000010C  0086            :C
                                  131   #endif ;XASMAVR
                                  132       
                                  133   ; -------------------------------------------
                                  134   #ifdef XASMAVR
                                  135   .SUBTTL Floating point constants
                                  136   .EJECT
AVR Macro-Assembler, Version 2.1                          29/12/2024  PAGE   4
Test: Operands, Operators and Expressions
Floating point constants

 LOC       OBJ                   LINE   SOURCE

                                  137   ; -------------------------------------------
                                  138   ; Floating Point Constants (1bit.7bits) and (1bit.15bits)
 0000010E  50 B0           :C     139           .DB     Q7(0.62500000), Q7(-0.62500000) ;; = $50,  (NOT $50) + 1
 00000110  D0 30           :C     140           .DB     Q7(1.625), Q7(-1.625)           ;; = $D0,  (NOT $D0) + 1
                                  141   
                                  142   ; 2.e+0	= 1
                                  143   ; 2.e-1 = 0,5
                                  144   ; 2.e-2 = 0,25
                                  145   ; 2.e-3 = 0,125
                                  146   ; 2.e-4 = 0,0625
                                  147   ; 2.e-5 = 0,03125
                                  148   ; 2.e-6 = 0,015625  Sum(2.e-1:2.e-6) = 0,9765625
                                  149   ; 2.e-7 = 0,0078125 Sum(2.e-1:2.e-7) = 0,9921875
                                  150   ;
                                  151   	.DB	000h   , 040h   , 020h    , 010h     ,                \
                                        	        Q7(0.0625), Q7(0.03125, Q7(0.015625), Q7(0.00078125), \
                                        		Q7(0.00390625), Q7(0.001953125)
 00000112  00 40 20 10 08  :C   
 00000117  04              :C
                                  152   
 00000118  7D 00           :C     153   	.DB	Q7(0.9765625), Q7(0.001953125)
                                  154   
 0000011A  7F FF 81 01     :C     155   	.DB     Q7(0.9921875), Q7(1.9921875), Q7(-0.9921875), Q7(-1.9921875)
                                  156    
                                  157   ; 2.e-8	 = 0,00390625
                                  158   ; 2.e-9  = 0,001953125
                                  159   ; 2.e-10 = 0,0009765625
                                  160   ; 2.e-11 = 0,00048828125
                                  161   ; 2.e-12 = 0,000244140625
                                  162   ; 2.e-13 = 0,0001220703125
                                  163   ; 2.e-14 = 0,00006103515625
                                  164   ; 2.e-15 = 0,000030517578125  
                                  165   ; 2.e-16 = 0,0000152587890625  Sum(2.e-8:2.e-16) = 0,999847412109375
                                  166   ; 2.e-17 = 0,00000762939453125 Sum(2.e-8:2.e-17) = 0,999969482421875
                                  167   ;
 0000011E  7FFB            :C     168   	.DW     Q15(0.999847412109375), Q15(0.999969482421875)
 00000120  7FFF            :C
                                  169   
 00000122  291A            :C     170   	.DW     Q15(0.321117799673000)           ;; = $291A, 10522
                                  171   
 00000124  7F00            :C     172   	.DW     Q15 (0.9921875), Q15 (1.9921875)
 00000126  FF00            :C
 00000128  8100            :C     173   	.DW    	Q15(-0.9921875), Q15(-1.9921875)
 0000012A  0100            :C
                                  174   #endif ;XASMAVR
                                  175   
                                  176   ; -------------------------------------------
                                  177   #ifdef XASMAVR
                                  178   .SUBTTL Operators
                                  179   .EJECT
AVR Macro-Assembler, Version 2.1                          29/12/2024  PAGE   5
Test: Operands, Operators and Expressions
Operators

 LOC       OBJ                   LINE   SOURCE

                                  180   #endif ;XASMAVR
                                  181   ; -------------------------------------------
                                  182   ; Operators			  ;WORD	BYTE
                                  183   ; -------------------------------------------
 0000012C  00 00           :C     184   _tst01: .DB $18 ==  3 , 24 ==  3  ;0000	00 00
 0000012E  01 01           :C     185           .DB $18 == $18, 24 == 24  ;0101         
 00000130  00 00           :C     186           .DB   3 == $18,  3 == 24  ;0000
                                  187   
 00000132  01 01           :C     188           .DB $18 !=  3 , 24 != 3   ;0101
 00000134  00 00           :C     189           .DB $18 != $18, 24 != 24  ;0000
 00000136  01 01           :C     190           .DB   3 != $18,  3 != 24  ;0101
                                  191   
 00000138  00 01           :C     192           .DB  -1 <= -2 , -2 <= -1  ;0100 00 01
 0000013A  01 00           :C     193           .DB  -1 <=  0 ,  0 <= -1  ;0001 01 00
 0000013C  00 00           :C     194           .DB $18 <=  3 , 24 <= 3   ;0000
 0000013E  01 01           :C     195           .DB $18 <= $18, 24 <= 24  ;0101
 00000140  01 01           :C     196           .DB   3 <= $18,  3 <= 24  ;0101
                                  197   
 00000142  01 00           :C     198           .DB  -1 >= -2 , -2 >= -1  ;0001 01 00
 00000144  00 01           :C     199           .DB  -1 >=  0 ,  0 >= -1  ;0100 00 01
 00000146  01 01           :C     200           .DB $18 >=  3 , 24 >= 3   ;0101
 00000148  01 01           :C     201           .DB $18 >= $18, 24 >= 24  ;0101
 0000014A  00 00           :C     202           .DB   3 >= $18,  3 >= 24  ;0000
                                  203   
 0000014C  01 00           :C     204           .DB  -1 > -2 ,  -2 >  -1  ;0001 01 00
 0000014E  00 01           :C     205           .DB  -1 >  0 ,   0 >  -1  ;0100 00 01
 00000150  01 00           :C     206           .DB $18 >  3 , -24 >  -3  ;0001	01 00
 00000152  00 00           :C     207           .DB $18 > $18, -24 > -24  ;0000	00 00
 00000154  00 01           :C     208           .DB   3 > $18,  -3 > -24  ;0100	00 01
                                  209   
 00000156  00 01           :C     210           .DB  -1 < -2 ,  -2 <  -1  ;0100 00 01
 00000158  01 00           :C     211           .DB  -1 <  0 ,   0 <  -1  ;0001 01 00
 0000015A  00 01           :C     212           .DB $18 <  3 , -24 <  -3  ;0100	00 01
 0000015C  00 00           :C     213           .DB $18 < $18, -24 < -24  ;0000	00 00
 0000015E  01 00           :C     214           .DB   3 < $18,  -3 < -24  ;0001	01 00
                                  215   
 00000160  01 01           :C     216           .DB  1 && 1, 1 && 1       ;0101
 00000162  00 00           :C     217           .DB  1 && 0, 1 && 0       ;0000
 00000164  00 00           :C     218           .DB  0 && 1, 0 && 1       ;0000
 00000166  00 00           :C     219           .DB  0 && 0, 0 && 0       ;0000
                                  220   
 00000168  01 01           :C     221           .DB  1 || 1,  1 || 1      ;0101
 0000016A  01 01           :C     222           .DB  1 || 0,  1 || 0      ;0101
 0000016C  01 01           :C     223           .DB  0 || 1,  0 || 1      ;0101
 0000016E  00 00           :C     224           .DB  0 || 0,  0 || 0      ;0000
                                  225   
 00000170  08 08           :C     226           .DB  $38 & $F,  56 & 15   ;0808
 00000172  1B 1B           :C     227           .DB  $18 | $B,  24 | 11   ;1B1B
 00000174  48 48           :C     228           .DB  $18 *  3,  24 *  3   ;4848
 00000176  0000            :C     229   	.DW    5 *  0 		  ;0000
 00000178  08 08           :C     230           .DB  $18 /  3,  24 /  3   ;0808
                                  231   ;;	.Dd    9 /  0	          ; Division by zero --> |ERROR|
 0000017A  04 04           :C     232           .DB  $18 %  5,  24 %  5   ;0404
                                  233   ;; 	.Dw    4 %  0	          ; Division by zero (MOD 0) --> |ERROR|
 0000017C  1B 1B           :C     234           .DB  $18 +  3,  24 +  3   ;1B1B
 0000017E  15 15           :C     235           .DB  $18 -  3,  24 -  3   ;1515
 00000180  C0 C0           :C     236           .DB  $18 << 3,  24 << 3   ;C0C0 
 00000182  06 06           :C     237           .DB  $18 >> 2,  24 >> 2   ;0606 
 00000184  11 11           :C     238           .DB  $18 ^  9,  24 ^  9   ;1111
                                  239   
                                  240   #ifdef XASMAVR
 00000186  55 3C           :C     241   	.DB  NOT(0AAh), NOT 0C3h
 00000188  04 04           :C     242           .DB  18h MOD  5h,  24 MOD(5)  ;0404
 0000018A  08 08           :C     243           .DB  38h AND 0Fh,  56 AND 15  ;0808
 0000018C  1B 1B           :C     244           .DB  18h OR  0Bh,  24 OR  11  ;1B1B
 0000018E  11 11           :C     245           .DB  18h XOR  9h,  24 XOR  9  ;1111
 00000190  C0 C0           :C     246           .DB  18h SHL  3h,  24 SHL  3  ;C0C0 
 00000192  06 06           :C     247           .DB  18h SHR  2h,  24 SHR  2  ;0606 
                                  248   #endif ;XASMAVR
                                  249   
                                  250           ; Unary operators		     
 00000194  FF FB 00 01     :C     251           .DB     -1, -5, -0, -$FF	 ;FF FB 00 01
                                  252   #ifdef XASMAVR
 00000198  01 05 00 FF     :C     253           .DB     +1, +5, +0, +$FF	 ;01 05 00 FF
                                  254   #endif ;XASMAVR
                                  255   					 
 0000019C  00 00 01 00 01  :C     256           .DB     !1, !5, !0, !$AA, !(2-2) ;00 00 01 00 01
 000001A1  00              :C           	.EVEN
 000001A2  FE FA FF 55 FF  :C     257           .DB     ~1, ~5, ~0, ~$AA, ~(2-2) ;FE FA FF 55 FF
 000001A7  00              :C           	.EVEN
                                  258       
AVR Macro-Assembler, Version 2.1                          29/12/2024  PAGE   6
Test: Operands, Operators and Expressions
Operators

 LOC       OBJ                   LINE   SOURCE

                                  259   ; -------------------------------------------
                                  260   #ifdef XASMAVR
                                  261   .SUBTTL Expressions
                                  262   .EJECT
AVR Macro-Assembler, Version 2.1                          29/12/2024  PAGE   7
Test: Operands, Operators and Expressions
Expressions

 LOC       OBJ                   LINE   SOURCE

                                  263   #endif ;XASMAVR
                                  264   ; -------------------------------------------
                                  265   ; Expression Examples
 = 00708000                       266   .SET    Osc_Hz         = 7372800               
 = 00000087                       267   .SET    cycle_time_ns  = (1000000000 / Osc_Hz) 
 = 00000001                       268   .SET 	cycles = ((2 + cycle_time_ns - 1) / cycle_time_ns - 0)
                                  269   
 000001A8  0007            :C     270           .DW 1 * 0b111   ; =07
 000001AA  0007            :C     271           .DW 0b111 * 1   ; =07
                                  272   
 = 0000000E                       273   	.SET _Exp2 = ((-1-1==-2)*0b111|1-0)<<1|high(0x1234)&1
 000001AC  000E            :C     274        	.DW  _Exp2  ; MASM=FFF2 (= -0E): no unary precedence (-1-1==-2) = TRUE = +1
                                  275   
 000001AE  0001            :C     276           .DW  -1-1==-2						       
 000001B0  0001            :C     277           .DW  (((-1 ))-(( 1 ))==(( -2)))						       
                                  278   
 000001B2  0004            :C     279           .DW  4+40*0     ; =0004
 000001B4  0004            :C     280           .DW  4+(40*0)   ; =0004
 000001B6  0000            :C     281           .DW  ((4+40)*0) ; =0000
                                  282   
 000001B8  0008            :C     283           .DW  1<<3|0<<2	     ; Dependig on precedence
 000001BA  0008            :C     284           .DW  (1<<3)|(0<<3)   ; Intended precedence         
 000001BC  0020            :C     285           .DW  (((1<<3)|0)<<2) ; left-to-right
                                  286   
 000001BE  80              :C     287   	.DB  (1<<7)
 000001BF  00              :C           	.EVEN
                                  288   ;;ha;;	.DB  (1<<8)	     ; .DB --> |ERROR|, not a |WARNING|
 000001C0  8000            :C     289   	.DW  (1<<15)
 000001C2  0000            :C     290   	.DW  (1<<16)	     ; .DW --> |WARNING| only 
<<<_avrtest07.ASM: |WARNING| Out of range, value is masked: 0x10000
                                  291   #ifdef XASMAVR
 000001C4  80000000        :C     292   	.DD  (1<<31)
 000001C8  00000001        :C     293   	.DD  (1<<32)	; Compiler masks 32bit (shiftNR=shiftNR & 0x1F)
<<<_avrtest07.ASM: |WARNING| Out of range, value is masked: 0x100000000
 000001CC  8000000000000000:C     294   	.DQ  (1<<63)
 000001D4  0000000000000000:C     295   	.DQ  (1<<64)	; Compiler sets 64bit result = 0x00
                                  296   #endif ;XASMAVR
                                  297   
                                  298           ; Constant16 values relying on assembler precedence
 000001DC  0032            :C     299           .DW     LOW(0x7654<<16|0x3210>>8)       ; =0032
 000001DE  0000            :C     300           .DW     HIGH(0x7654<<16|0x3210>>8)      ; =0000
 000001E0  0032            :C     301           .DW     LWRD((0x7654<<16|0x3210>>8))    ; =0032
 000001E2  7654            :C     302           .DW     HWRD((0x7654<<16|0x3210>>8))    ; =7654
                                  303   #ifdef XASMAVR
 000001E4  76540032        :C     304           .DD     0x7654<<16|0x3210>>8  		; =76540032
                                  305   #endif ;XASMAVR
                                  306   
                                  307   ;; !! Warning: Use parenthesis in complex expressions !!
                                  308   ;; Especially when mixing arithmetic with logical operators.
                                  309   ;; Example:
 = 00A60075                       310   .SET _VAR = 0xA600*256+0x75A2>>8  ;; =0000A675 assumed (result XASMAVR=00A60075)	  
 000001E8  0075            :C     311   	.DW LWRD(_VAR)		  ;; =    0075 XASMAVR NOT EXPECTED?!
 000001EA  00A6            :C     312   	.DW HWRD(_VAR)		  ;; =    00A6 XASMAVR NOT EXPECTED?!
                                  313   #ifdef XASMAVR
 000001EC  00A60075        :C     314   	.DD _VAR		  ;; =00A60075 NOT EXPECTED?!
 = 00A60075                       315   .SET _VAR = (0xA600*256)+(0x75A2>>8)
 000001F0  00A60075        :C     316   	.DD _VAR                  ;; =00A60075 expected
 = 0000A675                       317   .SET _VAR = (0xA600*256+0x75A2)>>8   
 000001F4  0000A675        :C     318   	.DD _VAR                  ;; =0000A675 expected	as assumed
                                  319   ;;#elif !DEFINED(XASMAVR)
                                  320   #else
                                  324   #endif ;XASMAVR
                                  325   
                                  326   ; -------------------------------------------
                                  327   #ifdef XASMAVR
                                  328   .EJECT
AVR Macro-Assembler, Version 2.1                          29/12/2024  PAGE   8
Test: Operands, Operators and Expressions
Expressions

 LOC       OBJ                   LINE   SOURCE

                                  329   #endif ;XASMAVR
                                  330   ; -------------------------------------------
 000001F8  000E            :C     331           .DW ((( ((( ((( -1 ))-(( 1 ))==(( -2))) )*( 0b111 ))|(( 1 ))-(( 0))) )<<( 1 ))|(( high(0x1234) )&
 000001FA  0032            :C     332   	.DW 0x7654<<16|0x3210>>8  ;; =76540032
<<<_avrtest07.ASM: |WARNING| Out of range, value is masked: 0x76540032
                                  333   
                                  334   #ifdef XASMAVR
 000001FC  FFFFFFFFFFFFFFFE:C     335   	.DQ 16*1024*1024*1024*1024*1024*1024-2, 18446744073709551615
 00000204  FFFFFFFFFFFFFFFF:C
 = 00000001                       336   .EQU _AbsConst4G=4294967296+1     ;; =4G+1
 = FFFFFFFF                       337   .EQU _AbsConst2G=4294967296/2-1	  ;; =2G-1
 0000020C  000000007FFFFFFF:C     338   	.DQ 4294967296/2-1,_AbsConst2G	     
 00000214  00000000FFFFFFFF:C
 0000021C  1234567890ABCD00:C     339   	.DQ 0x1234567890ABCDEF & 0xFFFFFFFFFFFFFF00,_AbsConst4G	     
 00000224  0000000000000001:C
                                  340   	.DQ   1110001111111111111111111111111111111111111000111010101001010101b, 1b, 1b*3, \
                                        	     %1110001111111111111111111111111111111111111000111010101001010101, %1, %1 *3, \
                                        	    0b1110001111111111111111111111111111111111111000111010101001010101,  1b, 1b*3, \
                                                                                0b110011101110110111011111000010111011,  1b, 1b*3, \
                                                                        0b10111100110011101110110111011111000010111011,  1b, 1b*3, \
                                                                            0b1100110011101110110111011111000010111011,  1b, 1b*3, \
                                                    0b1110001111111111111111111111111111111111111000111010101001010101
 0000022C  E3FFFFFFFFE3AA55:C   
 00000234  0000000000000001:C
 0000023C  0000000000000003:C
 00000244  E3FFFFFFFFE3AA55:C
 0000024C  0000000000000001:C
 00000254  0000000000000003:C
 0000025C  E3FFFFFFFFE3AA55:C
 00000264  0000000000000001:C
 0000026C  0000000000000003:C
 00000274  0000000CEEDDF0BB:C
 0000027C  0000000000000001:C
 00000284  0000000000000003:C
 0000028C  00000BCCEEDDF0BB:C
 00000294  0000000000000001:C
 0000029C  0000000000000003:C
 000002A4  000000CCEEDDF0BB:C
 000002AC  0000000000000001:C
 000002B4  0000000000000003:C
 000002BC  E3FFFFFFFFE3AA55:C
                                  341   
 000002C4  FFFFFFFFFFFFFFFE:C     342   	.DQ 18446744073709551615-1, 18446744073709551615, 18446744073709551615+1, 18446744073709551615/2 
 000002CC  FFFFFFFFFFFFFFFF:C
 000002D4  0000000000000000:C
 000002DC  7FFFFFFFFFFFFFFF:C
                                  343   
                                  344   #endif ;XASMAVR
                                  345   
                                  346   .EXIT

USER SYMBOLS

_AbsConst2G . . . . . . . . . . . . . .  FFFFFFFF A  _AbsConst4G . . . . . . . . . . . . . .  00000001 A  
_Exp2 . . . . . . . . . . . . . . . . .  0000000E A  _tst01. . . . . . . . . . . . . . . . .  0000012C C  
_VAR. . . . . . . . . . . . . . . . . .  0000A675 A  cycle_time_ns . . . . . . . . . . . . .  00000087 A  
cycles. . . . . . . . . . . . . . . . .  00000001 A  Osc_Hz. . . . . . . . . . . . . . . . .  00708000 A  
TEST1 . . . . . . . . . . . . . . . . .  00000011 A  XASMAVR . . . . . . . . . . . . . . . .  00000001 A  

 Info - Memory segments organization
        CSEG: Start = 0x00000000  End = 0x000002E4  Size = 740 byte(s)
        CSEG: Code size = 740 bytes

        DSEG: Start = 0x00002000  End = 0x00002000  Size = 0 byte(s)
        DSEG: Data size = 0 bytes

        ESEG: Start = 0x00001000  End = 0x00001000  Size = 0 byte(s)
        ESEG: Data size = 0 bytes

ASSEMBLY COMPLETE,   NO ERRORS
